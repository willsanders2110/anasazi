install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library (dplyr)
library (ggplot2)
target.data <- read.csv(file='target_data_both_columns.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df <- data.frame(target.data, calibration.data)
ggplot(data = df, aes(x = year, y = households)) + geom_line(colour = 'black') + geom_line(y = calibration, colour = 'red')
View(df)
ggplot(data = df, aes(x = year, y = households)) + geom_line(colour = 'black') + geom_line(x = year, y = calibration, colour = 'red')
ggplot(data = df, aes(x = year, y = calibration)) + geom_line(colour = 'black')
+ geom_line(y = households, colour = 'red')
df%>%
ggplot(data = df, aes(x = year, y = households)) + geom_line(colour = 'black') + geom_line(y = households, colour = 'red')
ggplot(aes(x = year, y = households)) + geom_line(colour = 'black') + geom_line(y = households, colour = 'red')
df%>%
ggplot(aes(x = year, y = households)) + geom_line(colour = 'black') + geom_line(y = households, colour = 'red')
df%>%
ggplot(aes(x = year, y = households)) + geom_line(colour = 'black') + geom_line(y = calibration, colour = 'red')
ggplot(aes(x = year, y = households)) + geom_line(colour = 'black')
df%>%
ggplot(aes(x = year, y = households)) + geom_line(colour = 'black')
library (ggplot2)
# creates graphs
year <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
df <- data.frame(target.data, calibration.data)
View(df)
View(df)
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
df <- data.frame(year.data, target.data, calibration.data)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df <- data.frame(year.data, target.data, calibration.data)
ggplot(data = df, aes(x = year.data, y = target.data)) + geom_line(colour = 'black') + geom_line(y = calibration.data, colour = 'red')
View(df)
View(df)
ggplot(data = df, aes(x = year.data, y = target.data)) + geom_line(colour = 'black')
library (ggplot2)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df <- data.frame(year.data, target.data, calibration.data)
ggplot(data = df, aes(x = year.data, y = target.data)) + geom_line(colour = 'black') + geom_line(y = calibration.data, colour = 'red')
ggplot(data = df, aes(x = year, y = thouseholds)) + geom_line(colour = 'black') + geom_line(y = chouseholds, colour = 'red')
ggplot(data = df, aes(x = year, y = thouseholds)) + geom_line(colour = 'black')
library (ggplot2)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df <- data.frame(year.data, target.data, calibration.data)
#creates initial plot of target data
p <- ggplot(data = df, aes(x = year, y = thouseholds)) + geom_line(colour = 'black')
#adds line to represent calibrated model data
p +  layer(geom_line(y = chouseholds, colour = 'red'))
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df <- data.frame(year.data, target.data, calibration.data)
#creates initial plot of target data
p <- ggplot(data = df, aes(x = year, y = thouseholds)) + geom_line(colour = 'black')
#adds line to represent calibrated model data
p +  layer(data = df, aes(x = year, y = chouseholds) + geom_line(colour = 'red'))
#adds line to represent calibrated model data
p +  layer(geom_line + data = df, aes(x = year, y = chouseholds) (colour = 'red'))
p +  layer(geom_line + aes(x = year, y = chouseholds) (colour = 'red'))
p +  layer(geom_line, aes(x = year, y = chouseholds) (colour = 'red'))
p +  layer(geom_line(y = chouseholds, colour = 'red'))
+  layer(geom_line(y = chouseholds, colour = 'red'))
p +  geom_line(data = df, y = chouseholds, colour = 'red')
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds, colour='black')) + geom_line(aes(y=chouseholds, colour='red'))
library (ggplot2)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df <- data.frame(year.data, target.data, calibration.data)
#creates initial plot of target data
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds, colour='black')) + geom_line(aes(y=chouseholds, colour='red'))
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds, colour='black'))
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds))
geom_line(aes(y=chouseholds, colour='red'))
+ geom_line(aes(y=chouseholds, colour='red'))
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds)) + geom_line(aes(y=chouseholds, colour='red'))
View(df)
library (ggplot2)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df <- data.frame(year.data, target.data, calibration.data)
#creates initial plot of target data
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds)) + geom_line(data= calibration.data, aes(y=chouseholds, colour='red'))
library (ggplot2)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df1 <- data.frame(year.data, target.data)
df2 <- data.frame(year, calibration.data)
df2 <- data.frame(year.data, calibration.data)
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges both data sets into one
df1 <- data.frame(year.data, target.data)
df2 <- data.frame(year.data, calibration.data)
#creates initial plot of target data
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds)) + geom_line(data= calibration.data, aes(y=chouseholds, colour='red'))
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds)) + geom_line(data= calibration.data, aes(x = year, y=chouseholds, colour='red'))
library (ggplot2)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges the year with the data
df1 <- data.frame(year.data, target.data)
df2 <- data.frame(year.data, calibration.data)
#creates initial plot of target data
ggplot() + geom_line(data = df, aes(x = year, y = thouseholds)) + geom_line(data= calibration.data, aes(x = year, y=chouseholds, colour='red'))
ggplot() + geom_line(data = df1, aes(x = year, y = thouseholds)) + geom_line(data= df2, aes(x = year, y=chouseholds, colour='red'))
View(df1)
View(df)
library (ggplot2)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges the year with each data set
df1 <- data.frame(year.data, target.data)
df2 <- data.frame(year.data, calibration.data)
# creates plot of target data
ggplot() + geom_line(data = df1, aes(x = year, y = thouseholds))
# adds plot of calibration data to the existing graph
+ geom_line(data= df2, aes(x = year, y=chouseholds, colour='red'))
library (ggplot2)
# creates graphs
year.data <- read.csv(file='year_data.csv')
target.data <- read.csv(file='target_data_test.csv')
# this line will need to change once you have the calibrated output file
calibration.data <- read.csv(file='output_test.csv')
# merges the year with each data set
df1 <- data.frame(year.data, target.data)
df2 <- data.frame(year.data, calibration.data)
ggplot() + geom_line(data = df1, aes(x = year, y = thouseholds))
# adds plot of calibration data to the existing graph
+ geom_line(data= df2, aes(x = year, y=chouseholds, colour='red'))
ggplot() + geom_line(data = df1, aes(x = year, y = thouseholds)) + geom_line(data= df2, aes(x = year, y=chouseholds, colour='red'))
install.packages("ggplot2")
# opens png
png("images/calibration_plot.png")
# creates plot of target data and then overlays the calibration data
ggplot() + geom_line(data = df1, aes(x = year, y = t_households)) + geom_line(data= df2, aes(x = year, y=c_households, colour='red'))
# closes png
dev.off()
# create histogram of posterior distributions
posterior.data <- read.csv(file='calibration/calibration_output.csv')
colnames(posterior.data) <- c("SQME", "SAE", "lower_death_age", "upper_death_age", "lower_infertility", "upper_infertility", "lower_fission_prob", "upper_fission_prob", "mean_maize_harvest", "variance_maize_harvest")
png("images/lower_death_age.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = lower_death_age), bins = 5)
dev.off()
png("images/upper_death_age.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = upper_death_age), bins = 5)
dev.off()
png("images/lower_infertility.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = lower_infertility), bins = 5)
dev.off()
png("images/upper_infertility.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = upper_infertility), bins = 5)
dev.off()
png("images/lower_fission_prob.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = lower_fission_prob), bins = 5)
dev.off()
png("images/upper_fission_prob.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = upper_fission_prob), bins = 5)
dev.off()
png("images/mean_maize_harvest.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = mean_maize_harvest), bins = 5)
dev.off()
png("images/variance_maize_harvest.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = variance_maize_harvest), bins = 5)
dev.off()
#' ##### EXAMPLE 3 #####
#' #####################
#'
#' ## this time, the model is a C++ function packed into a R function -- this time, the option
#' #'use_seed'must be turned to TRUE.
#' n=10
#' trait_prior=list(c("unif",3,5),c("unif",-2.3,1.6),c("unif",-25,125),c("unif",-0.7,3.2))trait_prior
#' ## only launching simulations with parameters drawn in the prior distributions
#'
#' ABC_sim<-ABC_rejection(model=trait_model, prior=trait_prior, nb_simul=n, use_seed=TRUE)ABC_sim
#'
#' ## launching simulations with parameters drawn in the prior distributions and performing
#' # the rejection step
#' sum_stat_obs=c(100,2.5,20,30000)
#' tolerance=0.2
#' ABC_rej<-ABC_rejection(model=trait_model, prior=trait_prior, nb_simul=n,summary_stat_target=sum_stat_obs, tol=tolerance, use_seed=TRUE)
#'
#' ## NB: see the package's vignette to see how to pipeline'ABC_rejection'with the function
#' #'abc'of the package'abc'to perform other rejection schemes.
source('~/Desktop/anasazi_model/calibration.r')
# opens png
png("images/calibration_plot.png")
# creates plot of target data and then overlays the calibration data
ggplot() + geom_line(data = df1, aes(x = year, y = t_households)) + geom_line(data= df2, aes(x = year, y=c_households, colour='red'))
# closes png
dev.off()
# create histogram of posterior distributions
posterior.data <- read.csv(file='calibration/calibration_output.csv')
colnames(posterior.data) <- c("SQME", "SAE", "lower_death_age", "upper_death_age", "lower_infertility", "upper_infertility", "lower_fission_prob", "upper_fission_prob", "mean_maize_harvest", "variance_maize_harvest")
png("images/lower_death_age.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = lower_death_age), bins = 5)
dev.off()
png("images/upper_death_age.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = upper_death_age), bins = 5)
dev.off()
png("images/lower_infertility.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = lower_infertility), bins = 5)
dev.off()
png("images/upper_infertility.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = upper_infertility), bins = 5)
dev.off()
png("images/lower_fission_prob.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = lower_fission_prob), bins = 5)
dev.off()
png("images/upper_fission_prob.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = upper_fission_prob), bins = 5)
dev.off()
png("images/mean_maize_harvest.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = mean_maize_harvest), bins = 5)
dev.off()
png("images/variance_maize_harvest.png")
ggplot() + geom_histogram(data= posterior.data, aes(x = variance_maize_harvest), bins = 5)
dev.off()
#' ##### EXAMPLE 3 #####
#' #####################
#'
#' ## this time, the model is a C++ function packed into a R function -- this time, the option
#' #'use_seed'must be turned to TRUE.
#' n=10
#' trait_prior=list(c("unif",3,5),c("unif",-2.3,1.6),c("unif",-25,125),c("unif",-0.7,3.2))trait_prior
#' ## only launching simulations with parameters drawn in the prior distributions
#'
#' ABC_sim<-ABC_rejection(model=trait_model, prior=trait_prior, nb_simul=n, use_seed=TRUE)ABC_sim
#'
#' ## launching simulations with parameters drawn in the prior distributions and performing
#' # the rejection step
#' sum_stat_obs=c(100,2.5,20,30000)
#' tolerance=0.2
#' ABC_rej<-ABC_rejection(model=trait_model, prior=trait_prior, nb_simul=n,summary_stat_target=sum_stat_obs, tol=tolerance, use_seed=TRUE)
#'
#' ## NB: see the package's vignette to see how to pipeline'ABC_rejection'with the function
#' #'abc'of the package'abc'to perform other rejection schemes.
source('~/Desktop/anasazi_model/calibration.r')
source('~/Desktop/anasazi_model/calibration.r')
source('~/Desktop/anasazi_model/calibration.r')
source('~/Desktop/anasazi_model/calibration.r')
source('~/Desktop/anasazi_model/calibration.r')
source('~/Desktop/anasazi_model/calibration.r')
# creates plot of target data and then overlays the calibration data
ggplot() + geom_line(data = df1, aes(x = year, y = t_households)) + geom_line(data= df2, aes(x = year, y=c_households, colour='red'))
